<apex:page id="MASCO_Attachments" showheader="false" sidebar="false">
    <apex:includeLightning />
    <apex:includeScript value="{!$Resource.MASResources}/scripts/jquery-3.3.1.min.js"/>
    <apex:stylesheet value="{!$Resource.SLDS252}/styles/salesforce-lightning-design-system.min.css"/>

    <style type="text/css">
        body {
            background: #fff;
            font-family: "Salesforce Sans", Arial, sans-serif;
        }
        .slds-icon {
            fill: currentColor;
        }
        .slds-file-selector__button{
            cursor:pointer;
        }
    </style>

    <div class="slds-form-element">
        <div class="slds-form-element__control">
            <div class="slds-file-selector slds-m-top--x-small slds-file-selector--files">
                <div class="slds-file-selector__dropzone">
                    <input type="file" onchange="uploadfile()"
                           class="slds-file-selector__input slds-assistive-text"
                           id="fileInputId" aria-describedby="file-selector-id"
                           accept=".jpg,.jpeg,.png,.doc,.docx,.pdf,.txt"/>
                    <label class="slds-file-selector__body" for="file-upload-input-01">
          <span id="cancel-button" class="slds-file-selector__button slds-button slds-button--neutral">
              <span class="slds-icon_container slds-icon-utility-upload ">
                  <svg aria-hidden="true"
                       class="slds-icon slds-icon--xx-small slds-button__icon slds-button__icon--left"
                       name="upload">
                      <use xmlns:xlink="http://www.w3.org/1999/xlink"
                           xlink:href="{!$Resource.SLDS252}/icons/utility-sprite/svg/symbols.svg#upload"></use>
                  </svg>
                  <span class="slds-assistive-text"></span>
              </span>
              Add Attachment</span>
                        <span class="slds-file-selector__text slds-medium-show">or Drag and Drop File</span>
                    </label>
                </div>
            </div>
            <div class="slds-float--right slds-m-top--small">
                <span class="slds-icon_container slds-icon-utility-info">
                    <svg aria-hidden="true"
                         class="slds-icon slds-icon--xx-small slds-m-left--small"
                         name="info">
                        <use xmlns:xlink="http://www.w3.org/1999/xlink"
                             xlink:href="{!$Resource.SLDS252}/icons/utility-sprite/svg/symbols.svg#info"></use>
                    </svg>
                </span>

                <span class="slds-text-title slds-m-left--xx-small">Upload limit is 2 GB (support file types are: .doc, .docx, .pdf, .txt, .png, .jpg)</span></div>

        </div>
        <div style="height:18px;" class="slds-form-element__help" id="error-01"></div>
    </div>


    <script type="text/javascript">
        var loading = false;
        var communityUrl = "https://{!$Site.Domain}";
        $(".slds-file-selector__button").click(function (e) {
            e.preventDefault();
            $("#fileInputId").trigger('click');
        });
        var setError = function (message) {
            $("#error-01").text(message || "");
            $(".slds-form-element").toggleClass('slds-has-error', message != null);
        };

        var randomString = function () {
            var str = '', i;
            for (i = 0; i < 4; i += 1) {
                str += (Math.random().toString(16) + "000000000").substr(2, 8);
            }
            return str;
        };

        function uploadfile(defaultFile) {
            if (!loading) {
                setError();
                var fileInput = $("#fileInputId")[0];
                var file = defaultFile || fileInput.files[0];

                var fileTypes = ".jpg,.jpeg,.png,.doc,.docx,.pdf,.txt";
                var ext = file.name.split('.');
                if (fileTypes.indexOf(ext[ext.length - 1].toLowerCase()) == -1) {
                    setError("You can upload the following file types: " + fileTypes);
                    return;
                }
                if (file.size > 2000000000) {
                    setError("File size cannot exceed 2 gb");
                    return;
                }
                if (file.name.length > this.MAX_FILENAME_LENGTH) {
                    setError("File Name length cannot exceed 255 symbols");
                    return;
                }
                uploadCustom(file, function (response) {
                    parent.postMessage(response, communityUrl);
                    loading = false;
                    $("#fileInputId").attr('disabled', false);
                    setError();
                }, function (request, status, response) {
                    parent.postMessage(response, communityUrl);
                    $("#fileInputId").attr('disabled', false);
                    loading = false;
                }, function (event) {
                    loading = true;
                    var progress = Math.round(event.loaded / event.total * 100);
                    parent.postMessage(progress, communityUrl);
                });
            }
        }

        var dropZone = $(".slds-file-selector__dropzone");
        $(".slds-file-selector__dropzone").on("dragenter dragstart dragend dragleave dragover drag drop", function (e) {
            e.preventDefault();
        });

        dropZone[0].ondragover = function () {
            if (!loading) {
                dropZone.addClass('slds-has-drag-over');
            }
            return false;
        };

        dropZone[0].ondragleave = function () {
            if (!loading) {
                dropZone.removeClass('slds-has-drag-over');
            }
            return false;
        };
        dropZone[0].ondrop = function (event) {
            if (!loading) {
                dropZone.removeClass('slds-has-drag-over');
                var file = event.dataTransfer.files[0];
                uploadfile(file);
            }
        };

        function uploadCustom(file, success, error, progress) {
            var boundary = randomString(),
                    filename = file.name;
            var id = "{!$Api.Session_ID}";

            var blob = new Blob([
                        "--boundary_" + boundary + "\n"
                        + "Content-Disposition: form-data; name=\"entity_content\";" + "\n"
                        + "Content-Type: application/json" + "\n\n"
                        + "{\"Origin\":\"H\",\"PathOnClient\":\"" + filename + "\"}"
                        + "\n\n"
                        + "--boundary_" + boundary + "\n"
                        + "Content-Type: application/octet-stream" + "\n"
                        + "Content-Disposition: form-data; name=\"VersionData"
                        + "\"; filename=\"" + filename + "\"\n\n",
                        file,
                        "\n\n"
                        + "--boundary_" + boundary + "--"
                    ], {type: 'multipart/form-data; boundary=\"boundary_' + boundary + '\"'}),
                    request = new XMLHttpRequest();

            request.open("POST", "{!$Site.Prefix}/services/data/v39.0/sobjects/ContentVersion/", true);

            request.setRequestHeader('Accept', 'application/json');
            request.setRequestHeader("Authorization", "Bearer " + id);
            request.setRequestHeader('X-User-Agent', 'salesforce-toolkit-rest-javascript/v39.0');
            request.setRequestHeader('Content-Type', 'multipart/form-data; boundary=\"boundary_' + boundary + '\"');
            request.onreadystatechange = function () {
                // continue if the process is completed
                if (request.readyState === 4) {
                    // continue only if HTTP status is good
                    if (request.status >= 200 && request.status < 300) {
                        // retrieve the response
                        success(request.response);
                    } else {
                        // return status message
                        error(request.response);
                    }
                }
            };
            request.upload.onprogress = function (event) {
                progress(event);
            };
            request.send(blob);
        }
    </script>
</apex:page>